from typing import BinaryIO


class TagType(int):
    BYTE = ...
    SHORT = ...
    INT = ...
    LONG = ...
    FLOAT = ...
    DOUBLE = ...
    STRING = ...
    LIST = ...
    COMPOUND = ...
    BYTES = ...
    INTS = ...
    LONGS = ...
    END = ...

class IOFormat(int):
    BIN = ...
    PRETTY_PRINT = ...

class Tag(object):
    def __repr__(self) -> str: ...
    def __copy__(self) -> Tag: ...
    def typeCode(self) -> TagType: ...
    def output(self, io: BinaryIO, format: IOFormat) -> None: ...

def parseRoot(input: BinaryIO) -> Tag: ...
def writeRoot(io: BinaryIO, tag: Tag) -> None: ...

class ContainerTag(Tag):
    def size(self) -> int: ...

class ByteTag(Tag):
    def __init__(self, value: int) -> None: ...
    def setPayload(self, value: int) -> None: ...
    def getPayload(self) -> int: ...

class ShortTag(Tag):
    def __init__(self, value: int) -> None: ...
    def setPayload(self, value: int) -> None: ...
    def getPayload(self) -> int: ...

class IntTag(Tag):
    def __init__(self, value: int) -> None: ...
    def setPayload(self, value: int) -> None: ...
    def getPayload(self) -> int: ...

class LongTag(Tag):
    def __init__(self, value: int) -> None: ...
    def setPayload(self, value: int) -> None: ...
    def getPayload(self) -> int: ...

class FloatTag(Tag):
    def __init__(self, value: float) -> None: ...
    def setPayload(self, value: float) -> None: ...
    def getPayload(self) -> float: ...

class DoubleTag(Tag):
    def __init__(self, value: float) -> None: ...
    def setPayload(self, value: float) -> None: ...
    def getPayload(self) -> float: ...

class StringTag(ContainerTag):
    def __init__(self) -> None: ...
    def __init__(self, value: str) -> None: ...
    def setPayload(self, value: str) -> None: ...
    def getPayload(self) -> str: ...

class ListTag(ContainerTag):
    def __init__(self) -> None: ...
    def __init__(self, value: TagType) -> None: ...
    def insert(self, value: Tag) -> None: ...
    def remove(self, index: int) -> Tag: ...
    def setContentType(self, value: TagType) -> None: ...
    def getContentType(self) -> TagType: ...
    def __getitem__(self, index: int) -> Tag: ...
    def __setitem__(self, index: int, value: Tag) -> None: ...

class IntsTag(ListTag):
    def __init__(self) -> None: ...

class LongsTag(ListTag):
    def __init__(self) -> None: ...

class CompoundTag(ContainerTag):
    def __init__(self) -> None: ...
    def insert(self, key: str, value: Tag) -> None: ...
    def lookup(self, key: str) -> Tag: ...
    def remove(self, key: str) -> Tag: ...

class TagParseError(Exception): ...
class ListTypeMismatchError(Exception): ...
